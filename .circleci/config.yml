#
# Note on --runInBand: 
#
# When running Jest tests, please use the --runInBand flag. Without this flag, Jest will try to
# allocate the CPU resources of the entire virtual machine in which your job is running. Using
# --runInBand will force Jest to use only the virtualized build environment within the virtual
# machine
#
# Note on --ci
#
# When this option is provided, Jest will assume it is running in a CI environment. This changes
# the behavior when a new snapshot is encountered. Instead of the regular behavior of storing a new
# snapshot automatically, it will fail the test and require Jest to be run with --updateSnapshot.
#
version: 2.1
commands:
  install:
    description: "Checks out and installs"

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: npm install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

  build-and-test:
    description: "Installs, builds, and tests"
    steps:
      - install

      - run: npm run build+test -- --ci --runInBand

      - store_test_results:
          path: junit.xml

jobs:
  test-and-coverage:
    docker:
      # specify the version you desire here
      - image: circleci/node:lts

    # setting this in every job for consistency is annoying
    # default is 'project'
    # working_directory: ~/erector

    steps:
      - install

      - run: npm run test+coverage -- --ci --runInBand

      - store_test_results:
          path: junit.xml

      - store_artifacts:
          path: coverage

      - run: npm run coverage-post

  test-node-6:
    docker:
      - image: circleci/node:6
    steps:
      - build-and-test

  test-node-7:
    docker:
      - image: circleci/node:7
    steps:
      - build-and-test

  test-node-8:
    docker:
      - image: circleci/node:8
    steps:
      - build-and-test

  test-node-9:
    docker:
      - image: circleci/node:9
    steps:
      - build-and-test

  test-node-10:
    docker:
      - image: circleci/node:10
    steps:
      - build-and-test

  test-node-11:
    docker:
      - image: circleci/node:11
    steps:
      - build-and-test

  test-node-12:
    docker:
      - image: circleci/node:12
    steps:
      - build-and-test

workflows: 
  version: 2
  # can set up nightly jobs
  build-and-test:
    jobs:
      - test-and-coverage

      # could conditionally test 6..12 based on PR attrs (label, dest branch) w/ "when:" or "filters"

      # knex tests need to be skipped to run 6 & 7
      #- test-node-6:
      #    requires:
      #      - test-and-coverage

      #- test-node-7:
      #    requires:
      #      - test-and-coverage

      - test-node-8:
          requires:
            - test-and-coverage

      - test-node-9:
          requires:
            - test-and-coverage

      - test-node-10:
          requires:
            - test-and-coverage

      - test-node-11:
          requires:
            - test-and-coverage

      - test-node-12:
          requires:
            - test-and-coverage

      # create tag/release
      # publish to NPM
